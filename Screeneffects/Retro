// Shader created with Shader Forge v1.38 
// Shader Forge (c) Neat Corporation / Joachim Holmer - http://www.acegikmo.com/shaderforge/
// Note: Manually altering this data may prevent you from opening it in Shader Forge
/*SF_DATA;ver:1.38;sub:START;pass:START;ps:flbk:,iptp:0,cusa:False,bamd:0,cgin:,lico:1,lgpr:1,limd:0,spmd:1,trmd:0,grmd:0,uamb:True,mssp:True,bkdf:False,hqlp:False,rprd:False,enco:False,rmgx:True,imps:True,rpth:0,vtps:0,hqsc:True,nrmq:1,nrsp:0,vomd:0,spxs:False,tesm:0,olmd:1,culm:1,bsrc:0,bdst:1,dpts:6,wrdp:True,dith:0,atcv:False,rfrpo:True,rfrpn:Refraction,coma:15,ufog:False,aust:False,igpj:True,qofs:1,qpre:3,rntp:2,fgom:False,fgoc:False,fgod:False,fgor:False,fgmd:0,fgcr:0.5,fgcg:0.5,fgcb:0.5,fgca:1,fgde:0.01,fgrn:0,fgrf:300,stcl:False,atwp:False,stva:128,stmr:255,stmw:255,stcp:6,stps:0,stfa:0,stfz:0,ofsf:0,ofsu:0,f2p0:False,fnsp:False,fnfb:False,fsmp:False;n:type:ShaderForge.SFN_Final,id:3138,x:33739,y:33757,varname:node_3138,prsc:2|emission-8534-OUT;n:type:ShaderForge.SFN_SceneColor,id:6438,x:32837,y:33107,varname:node_6438,prsc:2|UVIN-3113-OUT;n:type:ShaderForge.SFN_ScreenPos,id:2088,x:32006,y:32850,varname:node_2088,prsc:2,sctp:2;n:type:ShaderForge.SFN_Slider,id:1506,x:31389,y:33145,ptovrint:False,ptlb:Pixelate,ptin:_Pixelate,varname:node_1506,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,min:0.1,cur:1,max:10;n:type:ShaderForge.SFN_Vector1,id:6636,x:31546,y:33025,varname:node_6636,prsc:2,v1:64;n:type:ShaderForge.SFN_Divide,id:3564,x:32006,y:32991,varname:node_3564,prsc:2|A-1506-OUT,B-1972-OUT;n:type:ShaderForge.SFN_Divide,id:5864,x:32006,y:33137,varname:node_5864,prsc:2|A-1506-OUT,B-1972-OUT;n:type:ShaderForge.SFN_Divide,id:3771,x:32189,y:32991,varname:node_3771,prsc:2|A-2088-U,B-3564-OUT;n:type:ShaderForge.SFN_Divide,id:7856,x:32189,y:33137,varname:node_7856,prsc:2|A-2088-V,B-5864-OUT;n:type:ShaderForge.SFN_Multiply,id:3269,x:32601,y:33173,varname:node_3269,prsc:2|A-5347-OUT,B-5864-OUT;n:type:ShaderForge.SFN_Multiply,id:7667,x:32601,y:32980,varname:node_7667,prsc:2|A-2363-OUT,B-3564-OUT;n:type:ShaderForge.SFN_Append,id:3113,x:32837,y:32979,varname:node_3113,prsc:2|A-7667-OUT,B-3269-OUT;n:type:ShaderForge.SFN_Floor,id:5347,x:32439,y:33173,varname:node_5347,prsc:2|IN-7856-OUT;n:type:ShaderForge.SFN_Floor,id:2363,x:32418,y:32980,varname:node_2363,prsc:2|IN-3771-OUT;n:type:ShaderForge.SFN_ScreenParameters,id:1464,x:31180,y:32795,varname:node_1464,prsc:2;n:type:ShaderForge.SFN_Multiply,id:3432,x:31380,y:32790,varname:node_3432,prsc:2|A-1464-PXW,B-1464-PXH;n:type:ShaderForge.SFN_Log,id:5567,x:31546,y:32790,varname:node_5567,prsc:2,lt:2|IN-3432-OUT;n:type:ShaderForge.SFN_Multiply,id:1972,x:31755,y:32897,varname:node_1972,prsc:2|A-5567-OUT,B-6636-OUT;n:type:ShaderForge.SFN_Color,id:6440,x:32662,y:33710,ptovrint:False,ptlb:Dark,ptin:_Dark,varname:node_6440,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,c1:1,c2:0,c3:0,c4:1;n:type:ShaderForge.SFN_Color,id:7818,x:32662,y:33875,ptovrint:False,ptlb:Mid,ptin:_Mid,varname:node_7818,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,c1:0,c2:1,c3:0,c4:1;n:type:ShaderForge.SFN_Color,id:8754,x:32662,y:34056,ptovrint:False,ptlb:Bright,ptin:_Bright,varname:node_8754,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,c1:0,c2:0,c3:1,c4:1;n:type:ShaderForge.SFN_Posterize,id:5667,x:33224,y:33055,varname:node_5667,prsc:2|IN-6438-RGB,STPS-7626-OUT;n:type:ShaderForge.SFN_ValueProperty,id:7626,x:33063,y:33141,ptovrint:False,ptlb:Posterize,ptin:_Posterize,varname:node_7626,prsc:2,glob:False,taghide:False,taghdr:False,tagprd:False,tagnsco:False,tagnrm:False,v1:1028;n:type:ShaderForge.SFN_Multiply,id:3694,x:33684,y:33187,varname:node_3694,prsc:2|A-9327-R,B-3491-OUT;n:type:ShaderForge.SFN_Multiply,id:3493,x:33684,y:33313,varname:node_3493,prsc:2|A-9327-G,B-8679-OUT;n:type:ShaderForge.SFN_Multiply,id:2157,x:33684,y:33458,varname:node_2157,prsc:2|A-9327-B,B-4111-OUT;n:type:ShaderForge.SFN_Vector1,id:8679,x:33446,y:33447,varname:node_8679,prsc:2,v1:0.59;n:type:ShaderForge.SFN_Vector1,id:4111,x:33446,y:33517,varname:node_4111,prsc:2,v1:0.11;n:type:ShaderForge.SFN_Vector1,id:3491,x:33446,y:33221,varname:node_3491,prsc:2,v1:0.3;n:type:ShaderForge.SFN_Add,id:6994,x:33881,y:33252,varname:node_6994,prsc:2|A-3694-OUT,B-3493-OUT,C-2157-OUT;n:type:ShaderForge.SFN_Lerp,id:8534,x:33370,y:33780,varname:node_8534,prsc:2|A-8581-OUT,B-6539-OUT,T-6994-OUT;n:type:ShaderForge.SFN_Lerp,id:6539,x:33063,y:33836,varname:node_6539,prsc:2|A-7818-RGB,B-8754-RGB,T-6994-OUT;n:type:ShaderForge.SFN_Lerp,id:8581,x:33063,y:33713,varname:node_8581,prsc:2|A-6440-RGB,B-7818-RGB,T-6994-OUT;n:type:ShaderForge.SFN_ComponentMask,id:9327,x:33446,y:33290,varname:node_9327,prsc:2,cc1:0,cc2:1,cc3:2,cc4:-1|IN-5667-OUT;proporder:1506-6440-7818-8754-7626;pass:END;sub:END;*/

Shader "Dafirex/Pixelate v3" {
    Properties {
        _Pixelate ("Pixelate", Range(0.1, 10)) = 1
        _Dark ("Dark", Color) = (0.0627451,0.2156863,0.05490196,1)
        _Mid ("Mid", Color) = (0.6196079,0.7294118,0.06666667,1)
        _Bright ("Bright", Color) = (0.8000001,0.8627452,0.6352941,1)
        _Posterize ("Posterize", Float ) = 1028
    }
    SubShader {
        Tags {
            "IgnoreProjector"="True"
            "Queue"="Transparent+1"
            "RenderType"="Transparent"
        }
        GrabPass{ }
        Pass {
            Name "FORWARD"
            Tags {
                "LightMode"="ForwardBase"
            }
            Cull Front
            ZTest Always
            
            
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #define UNITY_PASS_FORWARDBASE
            #include "UnityCG.cginc"
            #pragma multi_compile_fwdbase
            #pragma only_renderers d3d9 d3d11 glcore gles 
            #pragma target 3.0
            uniform sampler2D _GrabTexture;
            uniform float _Pixelate;
            uniform float4 _Dark;
            uniform float4 _Mid;
            uniform float4 _Bright;
            uniform float _Posterize;
            struct VertexInput {
                float4 vertex : POSITION;
            };
            struct VertexOutput {
                float4 pos : SV_POSITION;
                float4 projPos : TEXCOORD0;
            };
            VertexOutput vert (VertexInput v) {
                VertexOutput o = (VertexOutput)0;
                o.pos = UnityObjectToClipPos( v.vertex );
                o.projPos = ComputeScreenPos (o.pos);
                COMPUTE_EYEDEPTH(o.projPos.z);
                return o;
            }
            float4 frag(VertexOutput i) : COLOR {
                float2 sceneUVs = (i.projPos.xy / i.projPos.w);
                float4 sceneColor = tex2D(_GrabTexture, sceneUVs);
////// Lighting:
////// Emissive:
                float node_1972 = (log10((_ScreenParams.r*_ScreenParams.g))*64.0);
                float node_3564 = (_Pixelate/node_1972);
                float node_5864 = (_Pixelate/node_1972);
                float3 node_5667 = floor(tex2D( _GrabTexture, float2((floor((sceneUVs.r/node_3564))*node_3564),(floor((sceneUVs.g/node_5864))*node_5864))).rgb * _Posterize) / (_Posterize - 1);
                float3 node_9327 = node_5667.rgb;
                float node_6994 = ((node_9327.r*0.3)+(node_9327.g*0.59)+(node_9327.b*0.11));
                float3 emissive = lerp(lerp(_Dark.rgb,_Mid.rgb,node_6994),lerp(_Mid.rgb,_Bright.rgb,node_6994),node_6994);
                float3 finalColor = emissive;
                return fixed4(finalColor,1);
            }
            ENDCG
        }
        Pass {
            Name "ShadowCaster"
            Tags {
                "LightMode"="ShadowCaster"
            }
            Offset 1, 1
            Cull Front
            
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #define UNITY_PASS_SHADOWCASTER
            #include "UnityCG.cginc"
            #include "Lighting.cginc"
            #pragma fragmentoption ARB_precision_hint_fastest
            #pragma multi_compile_shadowcaster
            #pragma only_renderers d3d9 d3d11 glcore gles 
            #pragma target 3.0
            struct VertexInput {
                float4 vertex : POSITION;
            };
            struct VertexOutput {
                V2F_SHADOW_CASTER;
            };
            VertexOutput vert (VertexInput v) {
                VertexOutput o = (VertexOutput)0;
                o.pos = UnityObjectToClipPos( v.vertex );
                TRANSFER_SHADOW_CASTER(o)
                return o;
            }
            float4 frag(VertexOutput i) : COLOR {
                SHADOW_CASTER_FRAGMENT(i)
            }
            ENDCG
        }
    }
    FallBack "Diffuse"
    CustomEditor "ShaderForgeMaterialInspector"
}
